#!/usr/bin/python

from __future__ import print_function
from sys import stdin, exit
import random
from random import randrange
from collections import namedtuple
import re

random.seed()

Primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]

NiceFriendlyPrimes = [2,3,5]
NiceFriendlyNumbers = [1,2,3,4,5,6,8,9,10,11,16,20,25]

def common(l1, l2):
	l2 = l2[:]
	common = [ e for e in l1 if e in l2 and (l2.pop(l2.index(e)) or True)]
	return common

def diff(l1, l2):  # that's subtractive, not symmetric!
	o = l1[:]
	for i in l2:
		if i in o:
			o.pop(o.index(i))
	return o

def factorize(n):
	if n < 1:
		raise AssertionError("Can't factorize an un-natural number")
	if n == 1:
		return []
	for p in Primes:
		if n % p == 0:
			ans = factorize(n / p)
			ans.append(p)
			return ans
	else:
		raise AssertionError("Oh no. I've been fed a large prime that isn't in my shoddily defined array")

# BEGIN SELF TEST
assert(diff([],[]) == [])
assert(diff([],[1]) == [])
assert(diff([1],[]) == [1])
assert(diff([1,1,2,3,3,3,4],[]) == [1,1,2,3,3,3,4])
assert(diff([1,1,2,3,3,3,4],[1]) == [1,2,3,3,3,4])
assert(diff([1,1,2,3,3,3,4],[4]) == [1,1,2,3,3,3])
assert(diff([1,1,2,3,3,3,4],[3]) == [1,1,2,3,3,4])
assert(diff([1,1,2,3,3,3,4],[1,1,3,4,5]) == [2,3,3])
assert(common([],[]) == [])
assert(common([],[1]) == [])
assert(common([1],[]) == [])
assert(common([1,1,2,3,3,3,4],[]) == [])
assert(common([1,1,2,3,3,3,4],[1]) == [1])
assert(common([1,1,6,2,3,3,3,4],[4,6,3]) == [6,3,4])
assert(common([1,1,2,3,3,3,4],[1,1,3,4,5,7]) == [1,1,3,4])

class Fraction(namedtuple('Fraction', ['numerator', 'denominator'])):
	def __repr__(self):
		return "{}/{}".format(self.numerator, self.denominator)

	def nice_repr(self):
		if self.numerator / self.denominator == 0:
			return self.__repr__()
		if self.denominator == 1:
			return str(self.numerator)
		return "{} {}/{}".format(self.numerator/self.denominator, self.numerator%self.denominator, self.denominator)

	def simplified(self):
		numf = factorize(self.numerator)
		denf = factorize(self.denominator)
		comm = common(numf, denf)
		#print()
		#print("{} {}".format(numf, denf))
		#print("{} {} {}".format(comm, diff(numf, comm), diff(denf, comm)))
		return Fraction(reduce(lambda x,y: x*y, diff(numf, comm), 1), reduce(lambda x,y: x*y, diff(denf, comm), 1))

def try_parse_frac(strang):
	try:
		m = re.match("(\\d+) (\\d+)/(\\d+)$", strang)
		if m:
			i, n, d = (int(n) for n in m.groups())
		m = re.match("(\\d+)/(\\d+)$", strang)
		if m:
			i, (n, d) = (0, (int(n) for n in m.groups()))
		m = re.match("(\\d+)$", strang)
		if m:
			i, (n, d) = (int(m.group(1)), (0,1))
		return Fraction((i*d)+n, d)
	except UnboundLocalError:
		return None

# BEGIN SELF TEST
assert(try_parse_frac("14 4/5") == Fraction(74,5))
assert(try_parse_frac("144/5") == Fraction(144,5))
assert(try_parse_frac("14") == Fraction(14,1))
assert(try_parse_frac("14 4 45") == None)

class Problem(namedtuple('Problem', ['left', 'operator', 'right'])):
	def __repr__(self):
		return "{} {} {}".format(self.left, self.operator, self.right)

	def semi_nice_repr(self):
		return "{}  {}  {}".format(
			self.left.nice_repr() if randrange(2) == 0 else self.left,
			self.operator,
			self.right.nice_repr() if randrange(2) == 0 else self.right
		)

	def solution(self):
		if self.operator == '+':
			fn = lambda (a,b),(x,y): Fraction((a*y + b*x), (b*y))
		elif self.operator == 'x':
			fn = lambda (a,b),(x,y): Fraction((a*x), (b*y))
		else:
			raise ValueError("What the hell is {}".format(self.operator))
		l, r = self.left, self.right
		if isinstance(l, Problem):
			l = l.solution()
		if isinstance(r, Problem):
			r = r.solution()
		return fn(l, r).simplified()

def try_calc_expression(strang):
	if '+' in strang:
		i = strang.index('+')
		return Problem(try_calc_expression(strang[:i].strip()), '+', try_calc_expression(strang[i+1:].strip())).solution()
	elif '*' in strang:
		i = strang.index('*')
		return Problem(try_calc_expression(strang[:i].strip()), 'x', try_calc_expression(strang[i+1:].strip())).solution()
	elif 'x' in strang:
		i = strang.index('x')
		return Problem(try_calc_expression(strang[:i].strip()), 'x', try_calc_expression(strang[i+1:].strip())).solution()
	else:
		# print("frac {} {}".format(strang.strip(), try_parse_frac(strang.strip())))
		return try_parse_frac(strang.strip())

# BEGIN SELF TEST
assert(Problem(Problem(Fraction(1,6), 'x', Fraction(3,2)), '+', Fraction(3,4)).solution() == Fraction(1,1))
assert(try_calc_expression("1/6 x 3/2 + 1/4") == Fraction(1,2))
assert(try_calc_expression("4/3 + 5/2") == Fraction(23,6))
assert(try_calc_expression("4/3 * 7") == Fraction(28,3))
# assert(try_calc_expression("(4/3) * 7") == Fraction(28,3))  # TODO

def is_friendly(n):  # i.e. is this a denominator it's currently reasonable to ask for as a decimal?
	# factorized = factorize(n)
	# return len(factorized) < 4 and all(p in NiceFriendlyPrimes for p in factorized)
	return n in NiceFriendlyNumbers

def __choose_fraction():
	while True:
		d = randrange(2, 1000)  # note the avoidance of 1 despite its "friendliness"
		if is_friendly(d):
			if randrange(2) == 0:  # arbitrary chance of being "top-heavy"
				yield Fraction(randrange(1, d), d)
			else:
				yield Fraction(randrange(d + 1, d*10), d)
_choose_fraction = __choose_fraction()  # TODO this is extremely annoying, try to find a way to wrap the generator nicely
def choose_fraction():
	return _choose_fraction.next()

def choose_problem():
	p = {}
	while True:
		problem = Problem(choose_fraction(), random.choice(['+','x']), choose_fraction())
		return problem

# BEGIN SELF TEST
assert(Fraction(1,2).simplified() == Fraction(1,2))
assert(Fraction(23,3).simplified() == Fraction(23,3))
assert(Fraction(87,9).simplified() == Fraction(29,3))

class FractionChecker(object):
	def describe(self, solution):
		return "as a fraction"

	def answer(self, solution):
		return str(solution.simplified())

	def check(self, solution, input):
		f = try_parse_frac(input)
		if f:
			if f == problem.solution().simplified():
				if self.is_good_format(solution, input):
					print("yes, well done")
					return True
				else:
					print("{} please!!".format(self.describe(solution)))
			elif f.simplified() != problem.solution().simplified():
				print("no")
			else:
				print("could be simpler!")
		else:
			f = try_calc_expression(input)
			if not f:
				print("sorry what??")
			elif f.simplified() != problem.solution().simplified():
				print("no")
			else:
				print("yes...")

		return False

class TopHeavyFractionChecker(FractionChecker):
	def describe(self, solution):
		return "as a fraction" if solution.numerator <= solution.denominator else "as a top-heavy fraction"

	def is_good_format(self, solution, input):
		return re.match("\\d+/\\d+$", input.strip()) or solution.numerator % solution.denominator == 0

class MixedNumberChecker(FractionChecker):
	def describe(self, solution):
		return "as a fraction" if solution.numerator < solution.denominator else "as a mixed number"

	def answer(self, solution):
		return solution.nice_repr()

	def is_good_format(self, solution, input):
		m = re.match("\\d+ (\\d+)/(\\d+$)", input.strip())
		if m and int(m.group(1)) < int(m.group(2)):
			return True
		return solution.numerator <= solution.denominator or solution.numerator % solution.denominator == 0

class DecimalChecker(FractionChecker):  # lolz
	def describe(self, solution):
		accurate = float(solution.numerator) / float(solution.denominator)
		if accurate != round(accurate, 5):
			return "as a decimal (to 5 decimal places)"
		return "as a decimal"
	
	def answer(self, solution):
		accurate = float(solution.numerator) / float(solution.denominator)
		return str(round(accurate, 5))

	def is_good_format(self, solution, input):
		try:
			f = float(input)
			return True
		except ValueError:
			return False
	
	def check(self, solution, input):
		try:
			accurate = float(solution.numerator) / float(solution.denominator)
			f = float(input)
			if f == round(accurate, 5):
				print("yes, well done")
				return True
		except ValueError:
			pass
		return super(DecimalChecker, self).check(solution, input)

# BEGIN SELF TEST
assert(not TopHeavyFractionChecker().is_good_format(Fraction(15,4),"2 7/4"))
assert(not TopHeavyFractionChecker().is_good_format(Fraction(15,4),"3 3/4"))
assert(TopHeavyFractionChecker().is_good_format(Fraction(15,4),"15/4"))
assert(TopHeavyFractionChecker().is_good_format(Fraction(15,5),"3"))
assert(TopHeavyFractionChecker().is_good_format(Fraction(3,5),"3/5"))
assert(not MixedNumberChecker().is_good_format(Fraction(15,4),"2 7/4"))
assert(not MixedNumberChecker().is_good_format(Fraction(15,4),"15/4"))
assert(MixedNumberChecker().is_good_format(Fraction(15,4),"3 3/4"))
assert(MixedNumberChecker().is_good_format(Fraction(15,5),"3"))
assert(MixedNumberChecker().is_good_format(Fraction(3,5),"3/5"))
assert(MixedNumberChecker().is_good_format(Fraction(3,5),"0 3/5"))

if __name__ == '__main__':
	while True:
		print()
		problem = choose_problem()
		if is_friendly(problem.solution().simplified().denominator):
			# TODO answer_type = random.choice(['decimal','percentage'])
			answer_type = random.choice([DecimalChecker])()
		else:
			answer_type = random.choice([TopHeavyFractionChecker, MixedNumberChecker])()
		while True:
			print()
			print(problem.semi_nice_repr(), end=', {} please\n'.format(answer_type.describe(problem.solution()), answer_type.answer(problem.solution())))
			print('answer? : ', end='')
			input = stdin.readline()
			if not input or input.strip == '':
				continue
			if input.strip() == 'b':  # it's a boring problem
				print("it was {}".format(answer_type.answer(problem.solution())))
				break
			elif input.strip() == 'q':
				print("BYE")
				exit()
			elif answer_type.check(problem.solution(), input):
				break
